//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/MasayaVRTemplate/Inputs/VRActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/MasayaVRTemplate/Inputs/VRActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @VRActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @VRActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRActions"",
    ""maps"": [
        {
            ""name"": ""VRInputs"",
            ""id"": ""3cb675d7-3df1-4c86-b252-6aff87011d3a"",
            ""actions"": [
                {
                    ""name"": ""TriggerPressed"",
                    ""type"": ""Button"",
                    ""id"": ""c485a7c7-f203-47c2-8ccf-433b7641cb31"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GripPressed"",
                    ""type"": ""Button"",
                    ""id"": ""7de74128-275a-4313-8ee6-f7d33d4dcdf9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AnalogPressed"",
                    ""type"": ""Button"",
                    ""id"": ""70c0c151-2f59-402c-abce-d4a260e23a64"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerValue"",
                    ""type"": ""Value"",
                    ""id"": ""ade716e1-4372-4ce8-8984-57f7a7a36ebd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripValue"",
                    ""type"": ""Value"",
                    ""id"": ""8ce67000-aaec-45e7-aa7e-72af0269d275"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AnalogValue"",
                    ""type"": ""Value"",
                    ""id"": ""f8257ff9-8a1f-42b0-aa93-2ec2e0d2cf55"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""cd97833d-cf7b-4659-9476-f9576c11db1f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""3a7d2587-6900-4a7d-97ec-29b83416d290"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""2f18a381-b7b6-455a-95cd-2413838b485d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""8ba07383-a572-4e07-b439-2c2143af40dc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""3f444364-8706-4f75-a575-79bc22f70cce"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""630ab50d-d939-4e06-97bc-3c28db4be122"",
                    ""path"": ""<XRController>/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0ea09f1-f6b1-44e5-93ba-53ed2c63522a"",
                    ""path"": ""<XRController>/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ee5090d-73a6-4e33-bb1f-5c83932aefde"",
                    ""path"": ""<XRController>/{Primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AnalogPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9dd6eb7-d527-48e6-841d-0e17bd0849c7"",
                    ""path"": ""<XRController>/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e91db862-3c00-49dd-902a-5f2555f15473"",
                    ""path"": ""<XRController>/{Grip}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25287ac3-5e58-40ca-b9a2-1c88136b8727"",
                    ""path"": ""<XRController>/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AnalogValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17e475d9-3908-4d61-9909-1188c69dd02d"",
                    ""path"": ""<XRController>/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf429e6d-98bc-4d93-9a1e-dd8c65e8b793"",
                    ""path"": ""<XRController>/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6eef1331-69dc-4bf2-a504-ac48b25a1b70"",
                    ""path"": ""<XRController>/{Primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""478f2516-320f-4e0d-accc-fc7bc95228d2"",
                    ""path"": ""<XRController>/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8c673c5-75a9-44de-95bf-a07fc4cca0b5"",
                    ""path"": ""<XRController>/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VRInputs
        m_VRInputs = asset.FindActionMap("VRInputs", throwIfNotFound: true);
        m_VRInputs_TriggerPressed = m_VRInputs.FindAction("TriggerPressed", throwIfNotFound: true);
        m_VRInputs_GripPressed = m_VRInputs.FindAction("GripPressed", throwIfNotFound: true);
        m_VRInputs_AnalogPressed = m_VRInputs.FindAction("AnalogPressed", throwIfNotFound: true);
        m_VRInputs_TriggerValue = m_VRInputs.FindAction("TriggerValue", throwIfNotFound: true);
        m_VRInputs_GripValue = m_VRInputs.FindAction("GripValue", throwIfNotFound: true);
        m_VRInputs_AnalogValue = m_VRInputs.FindAction("AnalogValue", throwIfNotFound: true);
        m_VRInputs_PrimaryButtonPressed = m_VRInputs.FindAction("PrimaryButtonPressed", throwIfNotFound: true);
        m_VRInputs_SecondaryButtonPressed = m_VRInputs.FindAction("SecondaryButtonPressed", throwIfNotFound: true);
        m_VRInputs_Teleport = m_VRInputs.FindAction("Teleport", throwIfNotFound: true);
        m_VRInputs_Grab = m_VRInputs.FindAction("Grab", throwIfNotFound: true);
        m_VRInputs_Interact = m_VRInputs.FindAction("Interact", throwIfNotFound: true);
    }

    ~@VRActions()
    {
        UnityEngine.Debug.Assert(!m_VRInputs.enabled, "This will cause a leak and performance issues, VRActions.VRInputs.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VRInputs
    private readonly InputActionMap m_VRInputs;
    private List<IVRInputsActions> m_VRInputsActionsCallbackInterfaces = new List<IVRInputsActions>();
    private readonly InputAction m_VRInputs_TriggerPressed;
    private readonly InputAction m_VRInputs_GripPressed;
    private readonly InputAction m_VRInputs_AnalogPressed;
    private readonly InputAction m_VRInputs_TriggerValue;
    private readonly InputAction m_VRInputs_GripValue;
    private readonly InputAction m_VRInputs_AnalogValue;
    private readonly InputAction m_VRInputs_PrimaryButtonPressed;
    private readonly InputAction m_VRInputs_SecondaryButtonPressed;
    private readonly InputAction m_VRInputs_Teleport;
    private readonly InputAction m_VRInputs_Grab;
    private readonly InputAction m_VRInputs_Interact;
    /// <summary>
    /// Provides access to input actions defined in input action map "VRInputs".
    /// </summary>
    public struct VRInputsActions
    {
        private @VRActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public VRInputsActions(@VRActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "VRInputs/TriggerPressed".
        /// </summary>
        public InputAction @TriggerPressed => m_Wrapper.m_VRInputs_TriggerPressed;
        /// <summary>
        /// Provides access to the underlying input action "VRInputs/GripPressed".
        /// </summary>
        public InputAction @GripPressed => m_Wrapper.m_VRInputs_GripPressed;
        /// <summary>
        /// Provides access to the underlying input action "VRInputs/AnalogPressed".
        /// </summary>
        public InputAction @AnalogPressed => m_Wrapper.m_VRInputs_AnalogPressed;
        /// <summary>
        /// Provides access to the underlying input action "VRInputs/TriggerValue".
        /// </summary>
        public InputAction @TriggerValue => m_Wrapper.m_VRInputs_TriggerValue;
        /// <summary>
        /// Provides access to the underlying input action "VRInputs/GripValue".
        /// </summary>
        public InputAction @GripValue => m_Wrapper.m_VRInputs_GripValue;
        /// <summary>
        /// Provides access to the underlying input action "VRInputs/AnalogValue".
        /// </summary>
        public InputAction @AnalogValue => m_Wrapper.m_VRInputs_AnalogValue;
        /// <summary>
        /// Provides access to the underlying input action "VRInputs/PrimaryButtonPressed".
        /// </summary>
        public InputAction @PrimaryButtonPressed => m_Wrapper.m_VRInputs_PrimaryButtonPressed;
        /// <summary>
        /// Provides access to the underlying input action "VRInputs/SecondaryButtonPressed".
        /// </summary>
        public InputAction @SecondaryButtonPressed => m_Wrapper.m_VRInputs_SecondaryButtonPressed;
        /// <summary>
        /// Provides access to the underlying input action "VRInputs/Teleport".
        /// </summary>
        public InputAction @Teleport => m_Wrapper.m_VRInputs_Teleport;
        /// <summary>
        /// Provides access to the underlying input action "VRInputs/Grab".
        /// </summary>
        public InputAction @Grab => m_Wrapper.m_VRInputs_Grab;
        /// <summary>
        /// Provides access to the underlying input action "VRInputs/Interact".
        /// </summary>
        public InputAction @Interact => m_Wrapper.m_VRInputs_Interact;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_VRInputs; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="VRInputsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(VRInputsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="VRInputsActions" />
        public void AddCallbacks(IVRInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_VRInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VRInputsActionsCallbackInterfaces.Add(instance);
            @TriggerPressed.started += instance.OnTriggerPressed;
            @TriggerPressed.performed += instance.OnTriggerPressed;
            @TriggerPressed.canceled += instance.OnTriggerPressed;
            @GripPressed.started += instance.OnGripPressed;
            @GripPressed.performed += instance.OnGripPressed;
            @GripPressed.canceled += instance.OnGripPressed;
            @AnalogPressed.started += instance.OnAnalogPressed;
            @AnalogPressed.performed += instance.OnAnalogPressed;
            @AnalogPressed.canceled += instance.OnAnalogPressed;
            @TriggerValue.started += instance.OnTriggerValue;
            @TriggerValue.performed += instance.OnTriggerValue;
            @TriggerValue.canceled += instance.OnTriggerValue;
            @GripValue.started += instance.OnGripValue;
            @GripValue.performed += instance.OnGripValue;
            @GripValue.canceled += instance.OnGripValue;
            @AnalogValue.started += instance.OnAnalogValue;
            @AnalogValue.performed += instance.OnAnalogValue;
            @AnalogValue.canceled += instance.OnAnalogValue;
            @PrimaryButtonPressed.started += instance.OnPrimaryButtonPressed;
            @PrimaryButtonPressed.performed += instance.OnPrimaryButtonPressed;
            @PrimaryButtonPressed.canceled += instance.OnPrimaryButtonPressed;
            @SecondaryButtonPressed.started += instance.OnSecondaryButtonPressed;
            @SecondaryButtonPressed.performed += instance.OnSecondaryButtonPressed;
            @SecondaryButtonPressed.canceled += instance.OnSecondaryButtonPressed;
            @Teleport.started += instance.OnTeleport;
            @Teleport.performed += instance.OnTeleport;
            @Teleport.canceled += instance.OnTeleport;
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="VRInputsActions" />
        private void UnregisterCallbacks(IVRInputsActions instance)
        {
            @TriggerPressed.started -= instance.OnTriggerPressed;
            @TriggerPressed.performed -= instance.OnTriggerPressed;
            @TriggerPressed.canceled -= instance.OnTriggerPressed;
            @GripPressed.started -= instance.OnGripPressed;
            @GripPressed.performed -= instance.OnGripPressed;
            @GripPressed.canceled -= instance.OnGripPressed;
            @AnalogPressed.started -= instance.OnAnalogPressed;
            @AnalogPressed.performed -= instance.OnAnalogPressed;
            @AnalogPressed.canceled -= instance.OnAnalogPressed;
            @TriggerValue.started -= instance.OnTriggerValue;
            @TriggerValue.performed -= instance.OnTriggerValue;
            @TriggerValue.canceled -= instance.OnTriggerValue;
            @GripValue.started -= instance.OnGripValue;
            @GripValue.performed -= instance.OnGripValue;
            @GripValue.canceled -= instance.OnGripValue;
            @AnalogValue.started -= instance.OnAnalogValue;
            @AnalogValue.performed -= instance.OnAnalogValue;
            @AnalogValue.canceled -= instance.OnAnalogValue;
            @PrimaryButtonPressed.started -= instance.OnPrimaryButtonPressed;
            @PrimaryButtonPressed.performed -= instance.OnPrimaryButtonPressed;
            @PrimaryButtonPressed.canceled -= instance.OnPrimaryButtonPressed;
            @SecondaryButtonPressed.started -= instance.OnSecondaryButtonPressed;
            @SecondaryButtonPressed.performed -= instance.OnSecondaryButtonPressed;
            @SecondaryButtonPressed.canceled -= instance.OnSecondaryButtonPressed;
            @Teleport.started -= instance.OnTeleport;
            @Teleport.performed -= instance.OnTeleport;
            @Teleport.canceled -= instance.OnTeleport;
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="VRInputsActions.UnregisterCallbacks(IVRInputsActions)" />.
        /// </summary>
        /// <seealso cref="VRInputsActions.UnregisterCallbacks(IVRInputsActions)" />
        public void RemoveCallbacks(IVRInputsActions instance)
        {
            if (m_Wrapper.m_VRInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="VRInputsActions.AddCallbacks(IVRInputsActions)" />
        /// <seealso cref="VRInputsActions.RemoveCallbacks(IVRInputsActions)" />
        /// <seealso cref="VRInputsActions.UnregisterCallbacks(IVRInputsActions)" />
        public void SetCallbacks(IVRInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_VRInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VRInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="VRInputsActions" /> instance referencing this action map.
    /// </summary>
    public VRInputsActions @VRInputs => new VRInputsActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "VRInputs" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="VRInputsActions.AddCallbacks(IVRInputsActions)" />
    /// <seealso cref="VRInputsActions.RemoveCallbacks(IVRInputsActions)" />
    public interface IVRInputsActions
    {
        /// <summary>
        /// Method invoked when associated input action "TriggerPressed" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTriggerPressed(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripPressed" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripPressed(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "AnalogPressed" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAnalogPressed(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TriggerValue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTriggerValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripValue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "AnalogValue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAnalogValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PrimaryButtonPressed" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimaryButtonPressed(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryButtonPressed" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryButtonPressed(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Teleport" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleport(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grab" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrab(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Interact" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInteract(InputAction.CallbackContext context);
    }
}
